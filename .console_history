  end
random_property_name
StubDataGenerator.new
g = _
g.populate_property
(Date.today - rand(365).days).to_time
(Date.today - rand(365).days).to_utc
iso8601(Time.now)
Time.now.iso8601
(Date.today - rand(365).days).to_time.iso8601
Time.now.to_s("%B %Y")
Time.now.strftime("%B %Y")
Time.now.strftime("%Y-%jT%RZ")
(Date.today - rand(365).days).to_time.strftime("%Y-%j-T%H%MZ")
(Date.today - rand(365).days).to_time.strftime("%Y-%m-T%H%MZ")
(Date.today - rand(365).days).to_time.strftime("%Y-%mm-%dT%H%MZ")
(Date.today - rand(365).days).to_time.strftime("%Y-%m-%dT%H%MZ")
(Date.today - rand(365).days).to_time.strftime("%Y-%m-%dT%H:%M:%sZ")
(Date.today - rand(365).days).to_time.strftime("%Y-%m-%dT%H:%M:%SZ")
q = Adapters::Solr::Query.new
q.criteria = "property_name"
q.criteria = nil
q.results
p = PropertyFactory.new
pp = p.properties(1)
pp = p.create!(1)
pp.to_json
endpoint = "#{Adapters::Solr.endpoint}/update"
pp.each{|property| response = HTTParty.post(endpoint, :headers => {'Content-Type' => 'application/json'}, :body => [property].to_json); puts response}
pp
pp.count
pp.each{|property| response = HTTParty.post(endpoint, :headers => {'Content-Type' => 'application/json'}, :body => property.to_json); puts response}
pp.each{|property| response = HTTParty.post(endpoint, :headers => {'Content-Type' => 'application/json'}, :body => {:property => property.to_json}.to_json); puts response}
pp.each{|property| response = HTTParty.post(endpoint, :headers => {'Content-Type' => 'application/json'}, :body => {:document => property}.to_json); puts response}
1000 - 188
pp.first
4200 / 2 / 60
4200 * 2 / 60
4200 * 2 / 60 / 60
4200 * 2 / 60.0 / 60
u.roles << Role.create(:description => 'Admin')
u.roles.frist
u.roles = Role.new(:apps => [bbedit])
u.roles = Role.new(:apps => [a])
u.roles <<  Role.new(:apps => [a])
a = App.create(:description => 'bbedit')
r = Role.create(:description => 'admin')
u.roles << Role.new(:apps => a, :description => 'power user')
UserAppRole.new
u.roles << Role.new(:app => a, :description => 'power user')
r 
relaod!
rekiad!
r.app = a
r = Role.last
a = App.last
r.apps = [a]
u.roles << Role.new(:app => App.last, :description => 'beginner'))
u.roles << Role.new(:apps => [App.last], :description => 'beginner')
u.email = 'corey@idolhands.com'
u.roles << Role.new(:app => App.last, :description => 'beginner')
u.email = 'corey2@idolhands.com'
u.apps(r)
u.roles.apps
u.apps << Role.new(:role => Role.last, :description => 'textual')
UserAppRole.last.order(:user_id)
UserAppRole.all
UserAppRole.las
UserAppRole.all.last
UserAppRole.all[-1]
u
u.roles.map{|r| r.app}
u.apps < App.new(:role => Role.last, :description => 'foi')
app_1 = App.last
app_2 = App.create(:description => 'mou')
u.roles = [Role.new(:app => app_1, :description => 'power user')]
u = User.new
app_1 = App.new(:description => 'panic')
u.roles << Role.new(:app => app_1, :description => 'tyro')
u.reload
u = User.first
User.count
UsrAppRole.last
UserAppRole.delete_all
u = User.create(:email => 'corey@idolhands.com')
a = App.create(:description => 'BBEdit')
u.roles << Role.new(:apps => [a], :description => 'power user')
u.save
u.roles
u.roles.first.apps
UserAppRole.last
a
u.roles.first
reload!
u = User.last
u.roles.first.app
u.apps
User.delete_all
Role.delete_all
exit
